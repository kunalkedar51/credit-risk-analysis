# -*- coding: utf-8 -*-
"""mini python code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u5kl3yj30-sdW6-xejx1RNopikkQTK32
"""

import pandas as pd
import xgboost as xgb
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

def load_data(file_path):
    df = pd.read_csv(file_path)
    return df

def preprocess_data(df):
    df = df.copy()
    X = df[['Monthly_Income', 'Total_Expenses', 'Yearly_Savings', 'Interest_Rate']]
    y = df['Yearly_Savings'] / df['Yearly_Income']  # Savings to income ratio
    return X, y

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = xgb.XGBRegressor(objective='reg:squarederror')
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    print("Model Training Complete")
    return model

def categorize_risk(score):
    if score < 0.2:
        return "High Risk"
    elif score < 0.5:
        return "Medium Risk"
    else:
        return "Low Risk"

def visualize_user_data(user_data):
    user_data.plot(kind='bar', figsize=(10, 5))
    plt.title("User Financial Overview")
    plt.xlabel("Parameters")
    plt.ylabel("Values")
    plt.show()

def analyze_loan_risk(name, loan_amount, loan_tenure, df, model):
    user_data = df[df['Name'].str.lower() == name.lower()]

    if user_data.empty:
        return "User not found in dataset"

    X_input = user_data[['Monthly_Income', 'Total_Expenses', 'Yearly_Savings', 'Interest_Rate']]
    score = model.predict(X_input)[0]
    risk_category = categorize_risk(score)

    print("Loan Risk Level:", risk_category)
    visualize_user_data(user_data.iloc[:, 1:])
    return risk_category

# Main execution
file_path = "/content/individual_expense_dataset_50_unique_names.csv"
df = load_data(file_path)
X, y = preprocess_data(df)
model = train_model(X, y)

# Example prediction
name = input("Enter Name: ")
loan_amount = float(input("Enter Loan Amount: "))
loan_tenure = int(input("Enter Loan Tenure: "))

result = analyze_loan_risk(name, loan_amount, loan_tenure, df, model)
print(result)

import pandas as pd
import xgboost as xgb
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import numpy as np

def load_data(file_path):
    df = pd.read_csv(file_path)
    return df

def preprocess_data(df):
    df = df.copy()
    X = df[['Monthly_Income', 'Total_Expenses', 'Yearly_Savings', 'Interest_Rate']]
    y = df['Yearly_Savings'] / df['Yearly_Income']  # Savings to income ratio
    return X, y

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = xgb.XGBRegressor(objective='reg:squarederror')
    model.fit(X_train, y_train)

    # Predictions on the test set
    predictions = model.predict(X_test)

    # Calculating Accuracy Metrics
    r2 = r2_score(y_test, predictions)
    mae = mean_absolute_error(y_test, predictions)
    mse = mean_squared_error(y_test, predictions)
    rmse = np.sqrt(mse)

    print("Model Training Complete")
    print(f"RÂ² Score: {r2}")
    print(f"Mean Absolute Error (MAE): {mae}")
    print(f"Mean Squared Error (MSE): {mse}")
    print(f"Root Mean Squared Error (RMSE): {rmse}")

    return model, X_test, y_test, predictions

def categorize_risk(score):
    if score < 0.2:
        return "High Risk"
    elif score < 0.5:
        return "Medium Risk"
    else:
        return "Low Risk"

def visualize_user_data(user_data):
    user_data.plot(kind='bar', figsize=(10, 5))
    plt.title("User Financial Overview")
    plt.xlabel("Parameters")
    plt.ylabel("Values")
    plt.show()

def visualize_model_performance(y_test, predictions):
    plt.figure(figsize=(10, 5))
    plt.scatter(y_test, predictions, color='blue', label='Predictions')
    plt.plot([0, 1], [0, 1], color='red', linestyle='--', label='Perfect Prediction Line')
    plt.title("Actual vs Predicted Values")
    plt.xlabel("Actual Values")
    plt.ylabel("Predicted Values")
    plt.legend()
    plt.show()

def analyze_loan_risk(name, loan_amount, loan_tenure, df, model):
    user_data = df[df['Name'].str.lower() == name.lower()]

    if user_data.empty:
        return "User not found in dataset"

    X_input = user_data[['Monthly_Income', 'Total_Expenses', 'Yearly_Savings', 'Interest_Rate']]
    score = model.predict(X_input)[0]
    risk_category = categorize_risk(score)

    print("Loan Risk Level:", risk_category)
    visualize_user_data(user_data.iloc[:, 1:])
    return risk_category

# Main execution
file_path = "/content/individual_expense_dataset_50_unique_names.csv"
df = load_data(file_path)
X, y = preprocess_data(df)

# Train the model and get metrics
model, X_test, y_test, predictions = train_model(X, y)

# Visualizing the model's performance
visualize_model_performance(y_test, predictions)

# Example prediction
name = input("Enter Name: ")
loan_amount = float(input("Enter Loan Amount: "))
loan_tenure = int(input("Enter Loan Tenure: "))

result = analyze_loan_risk(name, loan_amount, loan_tenure, df, model)
print(result)